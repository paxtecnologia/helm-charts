name: Delete Draft Releases - Debug Mode
on:
  workflow_dispatch:

jobs:
  delete-drafts:
    runs-on: ubuntu-latest
    steps:
      - name: Debug draft releases deletion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Configuração inicial com debug
          echo "::group::System Setup"
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          echo "jq version: $(jq --version)"
          echo "curl version: $(curl --version | head -n 1)"
          echo "::endgroup::"

          # Variáveis de controle
          PAGE=1
          PER_PAGE=100
          MAX_PAGES=10
          DELETED_COUNT=0
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"

          echo "::group::Initial Parameters"
          echo "Repo: $REPO_OWNER/$REPO_NAME"
          echo "Max pages: $MAX_PAGES"
          echo "Per page: $PER_PAGE"
          echo "::endgroup::"

          # Loop principal com debug detalhado
          while [[ $PAGE -le $MAX_PAGES ]]; do
            echo "::group::Processing Page $PAGE"
            
            # 1. Fetch API response with full debug
            echo "[DEBUG] Fetching page $PAGE from API..."
            RELEASES_RESPONSE=$(curl -v -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$API_URL?page=$PAGE&per_page=$PER_PAGE" 2>&1)
            
            # Log complete response for inspection
            echo "[DEBUG] Full API response:"
            echo "$RELEASES_RESPONSE"
            
            # Extract just the JSON body
            RELEASES_JSON=$(echo "$RELEASES_RESPONSE" | grep -E '^{.*}$')
            
            # 2. Validate JSON structure
            echo "[DEBUG] Validating JSON..."
            if ! jq -e '.' <<< "$RELEASES_JSON" >/dev/null 2>&1; then
              echo "::error::Invalid JSON response from API"
              echo "[DEBUG] JSON validation failed. Content:"
              echo "$RELEASES_JSON"
              break
            fi
            
            # 3. Process drafts
            echo "[DEBUG] Extracting draft releases..."
            DRAFT_IDS=$(echo "$RELEASES_JSON" | jq -r '.[] | select(.draft==true) | .id' 2>&1)
            JQ_EXIT_CODE=$?
            
            echo "[DEBUG] jq exit code: $JQ_EXIT_CODE"
            echo "[DEBUG] Found draft IDs: $DRAFT_IDS"
            
            if [[ $JQ_EXIT_CODE -ne 0 ]]; then
              echo "::warning::Error processing JSON with jq"
              echo "[DEBUG] jq error output:"
              echo "$DRAFT_IDS"
            fi
            
            if [[ -z "$DRAFT_IDS" ]]; then
              echo "No drafts found on page $PAGE"
              ((PAGE++))
              echo "::endgroup::"
              continue
            fi
            
            # 4. Delete drafts
            for release_id in $DRAFT_IDS; do
              echo "[DEBUG] Deleting release $release_id..."
              
              DELETE_RESPONSE=$(curl -v -s -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -w "\nHTTP_STATUS:%{http_code}" \
                "$API_URL/$release_id" 2>&1)
              
              HTTP_STATUS=$(echo "$DELETE_RESPONSE" | grep 'HTTP_STATUS:' | cut -d':' -f2)
              echo "[DEBUG] Delete response status: $HTTP_STATUS"
              echo "[DEBUG] Full delete response:"
              echo "$DELETE_RESPONSE"
              
              if [[ "$HTTP_STATUS" == "204" ]]; then
                echo "✅ Successfully deleted draft $release_id"
                ((DELETED_COUNT++))
              else
                echo "::error::Failed to delete draft $release_id (status: $HTTP_STATUS)"
              fi
            done
            
            ((PAGE++))
            echo "::endgroup::"
          done

          # Resultado final
          echo "::group::Final Results"
          echo "Total pages processed: $((PAGE-1))"
          echo "Total drafts deleted: $DELETED_COUNT"
          echo "::endgroup::"