name: Delete Draft Releases Manually
on:
  workflow_dispatch:

jobs:
  delete-drafts:
    runs-on: ubuntu-latest
    steps:
      - name: Delete draft releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Configura√ß√µes iniciais
          sudo apt-get update -y && sudo apt-get install -y jq curl
          DELETED_COUNT=0
          PAGE=1
          PER_PAGE=100
          MAX_PAGES=10  # Limite de p√°ginas para evitar loops infinitos
          
          echo "Starting draft releases cleanup..."
          
          while [[ $PAGE -le $MAX_PAGES ]]; do
            echo "‚åõ Fetching page $PAGE..."
            
            # Obt√©m releases com tratamento de erro
            RELEASES_JSON=$(curl -sf \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases?page=$PAGE&per_page=$PER_PAGE") || {
                echo "‚ö†Ô∏è Failed to fetch releases from API"
                break
              }
            
            # Verifica se a resposta √© v√°lida
            if ! jq -e 'if type=="array" then length>0 else false end' <<< "$RELEASES_JSON" >/dev/null; then
              echo "‚ÑπÔ∏è No more releases found or invalid response"
              break
            fi
            
            # Processa drafts
            DRAFT_IDS=$(echo "$RELEASES_JSON" | jq -r '.[] | select(.draft==true) | .id')
            
            if [[ -z "$DRAFT_IDS" ]]; then
              echo "‚û°Ô∏è No drafts found on page $PAGE"
              ((PAGE++))
              continue
            fi
            
            # Deleta cada draft
            for release_id in $DRAFT_IDS; do
              echo "üóëÔ∏è Attempting to delete draft release ID $release_id"
              
              RESPONSE=$(curl -sf -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                -w "%{http_code}" \
                -o /dev/null \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/$release_id") || {
                  echo "‚ö†Ô∏è Failed to connect to API for release $release_id"
                  continue
                }
              
              if [[ "$RESPONSE" == "204" ]]; then
                echo "‚úÖ Successfully deleted draft release ID $release_id"
                ((DELETED_COUNT++))
              else
                echo "‚ùå Failed to delete draft $release_id (HTTP $RESPONSE)"
              fi
            done
            
            ((PAGE++))
          done
          
          # Resumo final
          echo "--------------------------------------------------"
          echo "üèÅ Cleanup completed!"
          echo "üìä Total draft releases deleted: $DELETED_COUNT"
          echo "--------------------------------------------------"