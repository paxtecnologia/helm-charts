name: Delete Draft Releases - Robust Version
on:
  workflow_dispatch:

jobs:
  delete-drafts:
    runs-on: ubuntu-latest
    steps:
      - name: Delete draft releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Install dependencies
          sudo apt-get update -y
          sudo apt-get install -y jq curl

          # Configuration
          PAGE=1
          PER_PAGE=100
          MAX_PAGES=10
          DELETED_COUNT=0
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"
          TEMP_FILE=$(mktemp)

          echo "::group::Initial Parameters"
          echo "Repository: $REPO_OWNER/$REPO_NAME"
          echo "Max pages to check: $MAX_PAGES"
          echo "Releases per page: $PER_PAGE"
          echo "::endgroup::"

          while [[ $PAGE -le $MAX_PAGES ]]; do
            echo "::group::Processing Page $PAGE"
            
            # Fetch releases with proper error handling
            echo "Fetching releases (page $PAGE)..."
            HTTP_STATUS=$(curl -s -o "$TEMP_FILE" -w "%{http_code}" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$API_URL?page=$PAGE&per_page=$PER_PAGE")
            
            if [[ "$HTTP_STATUS" != "200" ]]; then
              echo "::error::Failed to fetch releases (HTTP $HTTP_STATUS)"
              echo "Response content:"
              cat "$TEMP_FILE"
              break
            fi

            # Validate JSON
            if ! jq -e '.' "$TEMP_FILE" >/dev/null; then
              echo "::error::Invalid JSON response"
              echo "Response content:"
              cat "$TEMP_FILE"
              break
            fi

            # Extract draft release IDs
            DRAFT_IDS=$(jq -r '.[] | select(.draft==true) | .id' "$TEMP_FILE")
            
            if [[ -z "$DRAFT_IDS" ]]; then
              echo "No draft releases found on page $PAGE"
              ((PAGE++))
              echo "::endgroup::"
              continue
            fi

            echo "Found draft releases: $DRAFT_IDS"
            
            # Delete each draft
            for release_id in $DRAFT_IDS; do
              echo "Deleting draft release $release_id..."
              DELETE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "$API_URL/$release_id")
              
              if [[ "$DELETE_STATUS" == "204" ]]; then
                echo "âœ… Successfully deleted draft $release_id"
                ((DELETED_COUNT++))
              else
                echo "::error::Failed to delete draft $release_id (HTTP $DELETE_STATUS)"
              fi
            done
            
            ((PAGE++))
            echo "::endgroup::"
          done

          # Cleanup and report
          rm -f "$TEMP_FILE"
          echo "::group::Final Results"
          echo "Total pages processed: $((PAGE-1))"
          echo "Total drafts deleted: $DELETED_COUNT"
          echo "::endgroup::"

          if [[ $DELETED_COUNT -eq 0 ]]; then
            echo "::warning::No draft releases were deleted"
          fi