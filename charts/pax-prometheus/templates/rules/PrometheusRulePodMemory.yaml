
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ printf "%s-%s" (include "pax-prometheus.fullname" .) "pax-pod-memory" | trunc 63 | trimSuffix "-" }}
  namespace: {{ template "pax-prometheus.namespace" . }}
  labels:
    app: {{ template "pax-prometheus.name" . }}
{{- if .Values.defaultRules }}
{{- if .Values.defaultRules.labels }}
{{ toYaml .Values.defaultRules.labels | indent 4 }}
{{- end }}
{{- if .Values.defaultRules.annotations }}
  annotations:
{{ toYaml .Values.defaultRules.annotations | indent 4 }}
{{- end }}
{{- end }}
spec:
  groups:
  - name: pax.k8s.rules.pod_memory
    rules:
    # 1 - Alerta para Pods Finalizados por OOM
    {{- if .Values.prometheusRulePodMemory.podOOMKilled.enabled }}
    # 1 - Alerta para Pods Finalizados por OOM
    - alert: PodOOMKilled
      expr: |-
        kube_pod_container_status_last_terminated_reason{job="kube-state-metrics", reason="OOMKilled"} == 1
      for: {{ .Values.prometheusRulePodMemory.podOOMKilled.for }}
      labels:
        severity: critical
      annotations:
        summary: "Pod finalizado por OOM (Out of Memory)"
        description: "O container {{`{{`}} $labels.container {{`}}`}} no pod {{`{{`}} $labels.pod {{`}}`}} (namespace: {{`{{`}} $labels.namespace {{`}}`}}) foi finalizado por OOMKilled. Workload: {{`{{`}} $labels.owner_kind {{`}}`}}/{{`{{`}} $labels.owner_name {{`}}`}}"
    {{- end }}
    {{- if .Values.prometheusRulePodMemory.podMemoryRequestUnderutilized.enabled }}
    # 2 - Alerta para Subutilização de Memória (vs Request)
    - alert: PodMemoryRequestUnderutilized
      expr: >-
        (
          (sum by(namespace, pod, container) (
            avg_over_time(
              container_memory_working_set_bytes{
                job="kubelet",
                metrics_path="/metrics/cadvisor",
                container!="",
                image!="",
                namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.namespace }}",
                pod!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.pod }}"
              }[1h]
            )
          )
          /
          sum by(namespace, pod, container) (
            kube_pod_container_resource_requests{
              job="kube-state-metrics",
              resource="memory",
              unit="byte",
              namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.namespace }}",
              pod!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.pod }}"
            }
          )) * 100
        )
        < {{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.threshold }}
      for: {{ .Values.prometheusRulePodMemory.podMemoryRequestUnderutilized.for }}
      labels:
        severity: warning
      annotations:
        summary: 'resource.request.memory maior que o consumo real em ({{`{{`}} printf "%.1f" $value {{`}}`}}%)'
        description: |-
          Container {{`{{`}} $labels.container {{`}}`}} (pod: {{`{{`}} $labels.pod {{`}}`}}, ns: {{`{{`}} $labels.namespace {{`}}`}}) 
          está usando apenas {{`{{`}} printf "%.1f" $value {{`}}`}}% do memory request. Considere reduzir os requests e limits para otimizar recursos.

    {{- end }}
    {{- if .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.enabled }}
    # 3 - Alerta para Uso Alto de Memória (vs Limit)
    - alert: PodMemoryUsageNearLimit
      expr: >-
        ((       
        sum(container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", container!="", image!="", namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.namespace }}", pod!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.pod }}"}) by (namespace, pod, container)
        /
        sum(kube_pod_container_resource_limits{job="kube-state-metrics", resource="memory", unit="byte", namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.namespace }}", pod!~"{{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.exclude.pod }}"} > 0) by (namespace, pod, container)
        ) * 100)
        > {{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.threshold }}
      for: {{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.for }}
      labels:
        severity: warning
      annotations:
        summary: "Uso de memória próximo ao limite ({{ .Values.prometheusRulePodMemory.podMemoryUsageNearLimit.threshold }}%)"
        description: |-
          Container {{`{{`}} $labels.container {{`}}`}} (pod: {{`{{`}} $labels.pod {{`}}`}}, ns: {{`{{`}} $labels.namespace {{`}}`}})
          está usando {{`{{`}} printf "%.1f" $value {{`}}`}}% do memory limit. Risco de OOMKilled. Considere aumentar o limit ou otimizar a aplicação.
    
    {{- end }}
    {{- if .Values.prometheusRulePodMemory.podMemoryRequestLow.enabled }}
    # 4 - Alerta para Consistente Excesso de Consumo de Memória sobre Request
    - alert: PodMemoryRequestLow
      expr: >-
        (
          sum by(namespace, pod, container) (
            avg_over_time(
              container_memory_working_set_bytes{
                job="kubelet",
                metrics_path="/metrics/cadvisor",
                container!="",
                image!="",
                namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryRequestLow.exclude.namespace }}",
                pod!~"{{ .Values.prometheusRulePodMemory.podMemoryRequestLow.exclude.pod }}"
              }[1h]
            )
          )
          >
          sum by(namespace, pod, container) (
            kube_pod_container_resource_requests{
              job="kube-state-metrics",
              resource="memory",
              unit="byte",
              namespace!~"{{ .Values.prometheusRulePodMemory.podMemoryRequestLow.exclude.namespace }}",
              pod!~"{{ .Values.prometheusRulePodMemory.podMemoryRequestLow.exclude.pod }}"
            }
          )
        )
      for: {{ .Values.prometheusRulePodMemory.podMemoryRequestLow.for }}
      labels:
        severity: warning
      annotations:
        summary: 'Consumo de memória maior que o request, valor atual: ({{`{{`}} printf "%.1f" $value {{`}}`}} bytes)'
        description: |-
          Container {{`{{`}} $labels.container {{`}}`}} (pod: {{`{{`}} $labels.pod {{`}}`}}, ns: {{`{{`}} $labels.namespace {{`}}`}}) 
          está consistentemente consumindo mais memória que o request definido.
          Média de consumo na última hora: {{`{{`}} printf "%.1f" $value {{`}}`}} bytes.
          Considere aumentar o memory request para evitar problemas de performance.
    
    {{- end }}
    {{- if .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.enabled }}
    # 5 - Alerts when Memory Limit exceeds Request by more than configured percentage
    - alert: MemoryBetweenRequestLimitGreaterThanPercent
      expr: >-
        (
          (
            kube_pod_container_resource_limits{job="kube-state-metrics", resource="memory", unit="byte", namespace!~"{{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.exclude.namespace }}", pod!~"{{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.exclude.pod }}"}
            /
            kube_pod_container_resource_requests{job="kube-state-metrics", resource="memory", unit="byte", namespace!~"{{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.exclude.namespace }}", pod!~"{{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.exclude.pod }}"}
            - 1
          ) * 100
        ) > {{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.threshold }}
      for: {{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.for }}
      labels:
        severity: warning
      annotations:
        summary: 'Memory limit exceeds request by {{`{{`}} printf "%.0f" $value {{`}}`}}% (threshold: {{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.threshold }}%)'
        description: |-
          Container {{`{{`}} $labels.container {{`}}`}} (Pod: {{`{{`}} $labels.pod {{`}}`}}, Namespace: {{`{{`}} $labels.namespace {{`}}`}})
          - Memory Request: {{`{{`}} printf "%.1f" (div (kube_pod_container_resource_requests{job="kube-state-metrics", resource="memory", unit="byte", namespace=$labels.namespace, pod=$labels.pod, container=$labels.container}) 1000000) {{`}}`}} MB
          - Memory Limit: {{`{{`}} printf "%.1f" (div (kube_pod_container_resource_limits{job="kube-state-metrics", resource="memory", unit="byte", namespace=$labels.namespace, pod=$labels.pod, container=$labels.container}) 1000000) {{`}}`}} MB
          - Percentage above request: {{`{{`}} printf "%.0f" $value {{`}}`}}%
          - Configured threshold: {{ .Values.prometheusRulePodMemory.memoryBetweenRequestLimitGreaterThanPercent.threshold }}%
          Consider adjusting memory requests/limits for better resource allocation.
    