apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" $ }}
  namespace: {{ template "common.names.namespace" $ }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    app: {{ include "common.names.name" . }}
    version: {{ .Values.app.version }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
        app: {{ include "common.names.name" . }}
        version: {{ .Values.app.version }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ms-generic.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      containers:
        - name: {{ template "common.names.fullname" $ }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NAMESPACE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_DEPLOYMENT_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
          {{- if .Values.env.enabled }}
            {{- toYaml .Values.env.data | nindent 12 }}
          {{- end }}
          {{- if or .Values.secret.enabled .Values.configMap.enabled .Values.envFrom.existingConfigMaps.enabled .Values.envFrom.existingSecrets.enabled  .Values.secretProviderClass.enabled  }}
          envFrom:
            {{- if .Values.secret.enabled }}
            - secretRef: 
                name: {{ template "common.names.fullname" $ }}-helm
            {{- end }}
            {{- if .Values.secretProviderClass.enabled }}
            {{- range .Values.secretProviderClass.itens }}
            - secretRef: 
                name: {{ include "ms-generic.names.secretProviderClass.secretName.name" ( dict "provider" .provider "context" $)  }}
            {{- end }}
            {{- end }}
            {{- if .Values.configMap.enabled }}
            - configMapRef:
                name: {{ template "common.names.fullname" $ }}-helm
            {{- end }}
            {{- if .Values.envFrom.existingSecrets.enabled }}
            {{- range .Values.envFrom.existingSecrets.list }}
            - secretRef:
                name:  {{ . }}
            {{- end }}
            {{- end }}
            {{- if .Values.envFrom.existingConfigMaps.enabled }}
            {{- range .Values.envFrom.existingConfigMaps.list }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- end }}
          {{- end }}
          ports:
            - name: http-app
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ or .Values.probe.liveness .Values.probe.path }}
              port: http-app
            timeoutSeconds: {{ .Values.probe.timeoutSeconds }}
            periodSeconds: {{ .Values.probe.periodSeconds }}
            successThreshold: {{ .Values.probe.successThreshold }}
            failureThreshold: {{ .Values.probe.failureThreshold }}
            initialDelaySeconds: {{ .Values.probe.initialDelaySeconds }}
          readinessProbe:
            httpGet:
              path: {{ or .Values.probe.readiness .Values.probe.path }}
              port: http-app
            timeoutSeconds: {{ .Values.probe.timeoutSeconds }}
            periodSeconds: {{ .Values.probe.periodSeconds }}
            successThreshold: {{ .Values.probe.successThreshold }}
            failureThreshold: {{ .Values.probe.failureThreshold }}
            initialDelaySeconds: {{ .Values.probe.initialDelaySeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if or .Values.secretProviderClass.enabled .Values.configMap.injectFile.enabled .Values.volumes.persistentVolumeClaim.enabled }}
          volumeMounts:
            {{- range .Values.volumes.persistentVolumeClaim.itens }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- range .Values.configMap.injectFile.itens }}
            - name: {{ include "ms-generic.names.injectFile.name" ( dict "name" .name "context" $)  }}
              mountPath: {{ .destPath }}
              readOnly: true
            {{- end }}
            {{- if .Values.secretProviderClass.enabled }}
            {{- range .Values.secretProviderClass.itens }}
            - name: secrets-store-inline-{{ .provider }}
              mountPath: /mnt/secrets-store
              readOnly: true
            {{- end }}
            {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.secretProviderClass.enabled .Values.configMap.injectFile.enabled .Values.volumes.persistentVolumeClaim.enabled }}
      volumes:
        {{- range .Values.volumes.persistentVolumeClaim.itens }}
         - name: {{ .name }}
           persistentVolumeClaim:
            claimName: {{ .claimName }}
        {{- end }}
        {{- range .Values.configMap.injectFile.itens }}
        - name: {{ include "ms-generic.names.injectFile.name" ( dict "name" .name "context" $)  }}
          configMap:
            name: {{ include "ms-generic.names.injectFile.name" ( dict "name" .name "context" $)  }}
        {{- end }}
        {{- if .Values.secretProviderClass.enabled }}
        {{- range .Values.secretProviderClass.itens }}
        - name: secrets-store-inline-{{ .provider }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "ms-generic.names.secretProviderClass.name" ( dict "provider" .provider "context" $)  }} 
        {{- end }}
        {{- end }}
      {{- end }}
